{
  "swagger": "2.0",
  "info": {
    "description": "Property Pro Lite is a platform where people can create and/or search properties for sale or rent.",
    "version": "1.0.0",
    "title": "Property Pro Lite",
    "contact": {
      "email": "lsjuz01@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Property",
      "description": "Buy or rent a property"
    },
    {
      "name": "User",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/properties": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Get all properties",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Property object that needs to be added to the app",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Property created"
          }
        },
        "security": [
          {
            "property_auth": [
              "write:properties",
              "read:properties"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Property"
        ],
        "summary": "Post a new property",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "property_auth": [
              "read:properties"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Property"
        ],
        "summary": "Update an existing property",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Property object that needs to be added to the app",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Property updated"
          },
          "404": {
            "description": "Property not found"
          }
        },
        "security": [
          {
            "property_auth": [
              "write:properties",
              "read:properties"
            ]
          }
        ]
      }
    },
    "/properties/findByType": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Finds Property by type",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Property"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "property_auth": [
              "write:properties",
              "read:properties"
            ]
          }
        ]
      }
    },
    "/properties/:id": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Find property by ID",
        "description": "Returns a single pet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "ID of property to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "Property not found"
          }
        },
        "security": [
          {
            "property_auth": [
              "write:properties",
              "read:properties"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Property"
        ],
        "summary": "Deletes a property",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Property id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Property deleted"
          },
          "404": {
            "description": "Property not found"
          }
        },
        "security": [
          {
            "property_auth": [
              "write:properties",
              "read:properties"
            ]
          }
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "description": "create account in the system.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/signin": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user email for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "401": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "property_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:properties": "modify properties in your account",
        "read:properties": "read your properties"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      }
    },
    "Property": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "description": "property status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        },
        "price": {
          "type": "string",
          "example": "$4508"
        },
        "state": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}